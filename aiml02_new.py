# -*- coding: utf-8 -*-
"""AIML02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1az04zM-vn7bWhVuDvqOpnz8eu7KVT8NO
"""

import re
class QnABot:
    def __init__(self):
        self.responses = {
            "admission procedure": "The admission procedure involves filling out the application form, submitting required documents, and paying the application fee.\n",
            "admission requirements": "The admission requirements include eligibility for the candidate, and the supporting original documents\n.",
            "admission deadlines": "The admission deadline is: August 31st 2024\n",
            "admission startdate": "The admission will start from July 2024. Classes will start from October 2024\n",
            "admission documents": "The documents required are Class 12th Marklist, Class 12th Pass Certificate, Birth Certificate and Adhaar Card\n",
            "admission eligibility": "The eligibility criteria requires the candidate to be 18 yrs or above and below 25 yrs at the time of admission\n",
            "admission courses": "We offer a variety of courses in Bachelors degree and Masters Degree. Do browse our website for further details.\n",
            "hello message": "Helloo There!\n"

        }
        self.context = {}

    def get_response(self, query):
        # Convert the query to lowercase to handle case-insensitive matching
        query = query.lower()

        # Basic context handling
        if "procedure" in query:
            response = self.responses["admission procedure"]
        elif "requirements" in query:
            response = self.responses["admission requirements"]
        elif "deadlines" in query:
            response = self.responses["admission deadlines"]

        elif "start"   in query:
            response = self.responses["admission startdate"]
        elif "documents" in query:
            response = self.responses["admission documents"]
        elif "eligibility" in query:
            response = self.responses["admission eligibility"]
        elif "courses" in query:
            response = self.responses["admission courses"]
        elif "hi" in query:
            response = self.responses["hello message"]
        elif "hello" in query:
            response = self.responses["hello message"]





        else:
            response = "I'm sorry, I can't answer that question\n.Pls contact the admission office. Mob No. 9999977777\nemail: abc@gmail.com"

        # Store the last query to provide context
        self.context['last_query'] = query

        return response

    def process_multiple_questions(self, user_input):
      delimiters= re.compile(r'[.?!]')
      questions= [q.strip() for q in delimiters.split(user_input) if q.strip()]
      responses= [self.get_response(question) for question in questions]
      return responses

    def engage_user(self):
        print("Hello! I am your college admission assistant. How can I help you today?\n")

        while True:
            user_input = input("You: ")



            # Exit condition
            if user_input.lower() in ["exit", "quit", "bye","thankyou"]:
                print("InfoBot: Thank you for using the college admission assistant. Goodbye!\n")
                break

            # Get response based on user input
            responses = self.process_multiple_questions(user_input)
            for response in responses:
              print(f"InfoBot: {response}")

            if 'last_query' in self.context:
              print(f"(Previous query: {self.context['last_query']})")
              print("\n")


if __name__ == "__main__":
    bot = QnABot()
    bot.engage_user()